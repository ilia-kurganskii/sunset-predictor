name: "Production"

on:
  workflow_dispatch:

jobs:
  terraform:
    environment: production
    name: "Terraform"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          # terraform_version: 0.13.0:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        working-directory: terraform
        id: fmt
        run: terraform fmt -check -recursive -diff

      - name: Terraform Init
        working-directory: terraform/environments/prod
        id: init
        run: terraform init

      - name: Terraform Validate
        working-directory: terraform/environments/prod
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        working-directory: terraform/environments/prod
        id: plan
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          OPEN_WEATHER_TOKEN: ${{ secrets.OPEN_WEATHER_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color \
          -var="telegram_token=$TELEGRAM_BOT_TOKEN" \
          -var="telegram_chat_id=$TELEGRAM_CHAT_ID" \
          -var="open_weather_token=$OPEN_WEATHER_TOKEN"

      - name: Terraform Apply (Prod)
        working-directory: terraform/environments/prod
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          OPEN_WEATHER_TOKEN: ${{ secrets.OPEN_WEATHER_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          terraform apply -auto-approve \
            -var="telegram_token=$TELEGRAM_BOT_TOKEN" \
            -var="telegram_chat_id=$TELEGRAM_CHAT_ID" \
            -var="open_weather_token=$OPEN_WEATHER_TOKEN"

  telegram-bot:
    environment: production
    name: "Telegram bot"
    runs-on: ubuntu-latest
    needs:
      - terraform

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ECR_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.ECR_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install dependencies
        working-directory: telegram-bot
        run: yarn install --frozen-lockfile

      - name: Terraform init
        working-directory: terraform/environments/prod
        run: terraform init

      - name: Build
        working-directory: telegram-bot
        run: yarn build

      - name: Archive
        working-directory: telegram-bot
        run: |
          yarn install --production
          mv node_modules ./dist/
          zip -r dist.zip ./dist

      - name: Upload to S3
        run: |
          BUCKET=$(terraform -chdir=terraform/environments/prod output -raw  s3_lambda_bucket)
          BUCKET_KEY=$(terraform -chdir=terraform/environments/prod output -raw  s3_lambda_bucket_key)
          aws s3 cp ./telegram-bot/dist.zip s3://$BUCKET/$BUCKET_KEY

      - name: Update function
        run: |
          BUCKET=$(terraform -chdir=terraform/environments/prod output -raw  s3_lambda_bucket)
          BUCKET_KEY=$(terraform -chdir=terraform/environments/prod output -raw  s3_lambda_bucket_key)
          NAME=$(terraform -chdir=terraform/environments/prod output -raw  lambda_name)
          aws lambda update-function-code --function-name $NAME --s3-bucket $BUCKET --s3-key $BUCKET_KEY --publish > /dev/null  
  

  recorder-service:
    environment: production
    name: "Recorder service"
    runs-on: ubuntu-latest
    needs:
      - terraform

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ECR_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.ECR_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Terraform Init
        working-directory: terraform/environments/prod
        run: terraform init

      - name: Build
        run: |
          ECR_URL=$(terraform -chdir=terraform/environments/prod output -raw  ecr_repository_url)
          docker build -t $ECR_URL:$GITHUB_RUN_ID -t $ECR_URL:latest ./sunset-recorder

      - name: Push image to Amazon ECR
        run: |
          ECR_URL=$(terraform -chdir=terraform/environments/prod output -raw  ecr_repository_url)
          docker push $ECR_URL:latest





  seeds:
    environment: production
    name: "Add places"
    runs-on: ubuntu-latest
    needs:
      - terraform
      - telegram-bot

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ECR_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.ECR_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Terraform init
        working-directory: terraform/environments/prod
        run: terraform init

      - name: Add places
        run: |
          NAME=$(terraform -chdir=terraform/environments/prod output -raw  lambda_name)
          sh ./telegram-bot/seeds/seed.sh $NAME
